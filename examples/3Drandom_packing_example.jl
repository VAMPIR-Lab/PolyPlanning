using PolyPlanning
using Polyhedra
using LinearAlgebra
using SparseArrays
using GLMakie
using Symbolics

r=rand
mrp = ([4,2,1]+r(3))/4
# e, θ = PolyPlanning.axis_angle_from_mrp(mrp)
# err = mrp - PolyPlanning.mrp_from_axis_angle(e, θ)
# if norm(err)>1e-4
#     @warn err
#     println(e)
#     println(rad2deg(θ))
# end
trans =zeros(3) + [5,2,3] + r(3)
x0 = [trans; mrp; zeros(6)]

Ve = [[-r(), -r(), -r()], [r(), -r(), -r()], [0, r(), -r()], [0, 0, 5r()]]
Vo1 = [[-1-r(), -1-r(), -1-r()], [1+r(), -1-r(), -1-r()], [0, 1+r(), -1-r()], [0, 0, 5r()]]
Vo2 = [[-1-r(), -1-r(), 1+r()], [1+r(), -1-r(), 1+r()], [0, 1+r(), 1+r()], [0, 0, -5r()]]
Vo3 = [[3r(),3r(),3r()], [3r(),3r(),3r()], [3r(),3r(),3r()], [3r(),3r(),3r()]]


# # success example
# x0=[5.650530044055372,2.543840168058619,3.07638181761498,1.026193123994465,0.6354979144725007,0.4713567932520325,0.0,0.0,0.0,0.0,0.0,0.0]
# Ve = [[-0.31822548564254016, -0.3581025253582616, -0.17516160728486496],
# [0.5329421287163413, -0.6858966368162803, -0.49184278399090586],
# [0.0, 0.46256837919661886, -0.3630302271283352], [0.0, 0.0, 0.8325626114258877]]
# Vo1=[[-1.4124579489604305, -1.7408834343392958, -1.183853525550069],
# [1.5782362174819262, -1.34633918610923, -1.1360703212170882],
# [0.0, 1.8319664436476089, -1.4708332611212196] ,
# [0.0, 0.0, 4.520406526968425]
# ]
# Vo2=[[-1.8090249024122276, -1.837362900170374, 1.4926843679435198],
# [1.6210436341615457, 1.6172860789861354, 1.7076346960493693],
# [0.0, 1.118147950193499, 1.462411504373387]    ,
# [0.0, 0.0, -1.9556185996889925]
# ]
# Vo3=[ [3.3718050377688256, 2.533919251941978, 1.062872982009209],
# [1.736542856536936, 2.5761102539537135, 2.277017652819808],
# [0.7677146554669978, 1.5569621989157247, 1.1063109456932385],
# [3.1306454412167373, 3.9037170982605693, 3.3219174189108562]
# ]

# # success example
# x0=[ 5.381170516435998, 2.8272062465362544, 3.7801368350476774, 1.1080868669196708, 0.5611652192408999, 0.446828114453417, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
# Ve = [[-0.39319532409556424, -0.8393496128252275, -0.1300880546250981],
#  [0.46667415746143825, -0.5111280613721805, -0.3223036276262251],
#  [0.0, 0.7226012266760078, -0.6551028257325158] ,
#  [0.0, 0.0, 4.604573271052692]]
# Vo1=[ [-1.3036894879052947, -1.716832681149324, -1.647099157028765],
#  [1.0212881901006172, -1.4460364987901193, -1.6314317028442589],
#  [0.0, 1.0996234343110405, -1.8591328019998623] ,
#  [0.0, 0.0, 0.8007546571035135]
# ]
# Vo2=[ [-1.377778848547869, -1.1370324780047434, 1.7859939161155405],
#  [1.4150519031438056, -1.4270526250988615, 1.4969120527669952],
#  [0.0, 1.3918912416534084, 1.9040320680587541]  ,
#  [0.0, 0.0, -2.8425283983011633]
# ]
# Vo3=[  [0.8784775217219699, 2.9673128906108186, 2.390012695612529],
#  [0.11873600408587326, 2.880923606250809, 2.0870217012556793],
#  [0.08931476265169391, 1.1347380334607557, 2.1208910556264517],
#  [0.9656319789049497, 0.7685950963995606, 2.1815783114651417]
# ]

# # failure example
x0=[ 5.538181937203403,2.9946912343194607,3.9902351379802647,1.1621077654249587,0.5956789505662331,0.3550044130779838,0.0,0.0,0.0,0.0,0.0,0.0]
Ve = [[-0.4097392639372899, -0.9124898264752445, -0.8504415173531913],
[0.03882398891017902, -0.7719007833350109, -0.7864153542231873],
[0.0, 0.7008817257891836, -0.4353932474007616] ,
[0.0, 0.0, 0.6631608299432395]]
Vo1=[  [-1.6052121787431006, -1.5287350021989083, -1.843460806128218],
[1.0942414587592322, -1.718051162749759, -1.805671194980862],
[0.0, 1.488065762951868, -1.328795906985915]   ,
[0.0, 0.0, 4.729755671992011]
]
Vo2=[  [-1.1358876572113996, -1.7869764565721273, 1.9151389221942623],
[1.6015136149311036, -1.6770103884957392, 1.8866617659392326],
[0.0, 1.5031396588761305, 1.6188456988962252]  ,
[0.0, 0.0, -4.000022643645013]
]
Vo3=[  [2.246833359370593, 2.675938154245931, 2.0199219199652583],
[2.968779268745329, 2.4284472605703, 0.9195927848568414],
[0.9222205333610308, 0.37616522923310514, 0.06563102269074939],
[2.827831123900552, 2.180219087281555, 0.5373495418387162]
]

Pe = PolyPlanning.ConvexPolygon3D(Ve)
Po1 = PolyPlanning.ConvexPolygon3D(Vo1)
Po2 = PolyPlanning.ConvexPolygon3D(Vo2)
Po3 = PolyPlanning.ConvexPolygon3D(Vo3)
ego_polys = [Pe]
obs_polys = [Po1, Po2, Po3]


R_cost = 1e-3 * PolyPlanning.I(6)
R_cost[4:6, 4:6] = R_cost[4:6, 4:6] / 100.0
nonsmooth_prob = PolyPlanning.setup_nonsmooth_3d(
    ego_polys,
    obs_polys;
    T=20,
    dt=.2,
    R_cost,
    Q_cost=2e-3 * PolyPlanning.I(3),
    u1_max=10.0,
    u2_max=10.0,
    u3_max=10.0,
    u4_max=π,
    u5_max=π,
    u6_max=π,
	n_sd_slots=15
)

our_sol = PolyPlanning.solve_nonsmooth_3d(nonsmooth_prob, x0; is_displaying=true, sleep_duration=0.01)